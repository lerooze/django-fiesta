# Generated by Django 3.0b1 on 2019-10-29 18:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import versionfield


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('conceptscheme', '0001_initial'),
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, max_length=31, verbose_name='ID')),
                ('annotation_title', models.CharField(blank=True, max_length=127, verbose_name='title')),
                ('annotation_type', models.CharField(blank=True, max_length=31, verbose_name='type')),
                ('annotation_url', models.URLField(blank=True, verbose_name='URL')),
                ('text', models.TextField(blank=True, verbose_name='Text')),
                ('text_en', models.TextField(blank=True, null=True, verbose_name='Text')),
                ('text_el', models.TextField(blank=True, null=True, verbose_name='Text')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('assignment_status', models.IntegerField(choices=[(0, 'Mandatory'), (1, 'Conditional')], verbose_name='Assignment status')),
            ],
            options={
                'verbose_name': 'Attribute',
                'verbose_name_plural': 'Attributes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('null', models.BooleanField(default=False, verbose_name='Null')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dataflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('version', versionfield.VersionField(default='1.0')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
            ],
            options={
                'verbose_name': 'Dataflow',
                'verbose_name_plural': 'Dataflows',
                'ordering': ['agency', 'object_id', '-version'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('version', versionfield.VersionField(default='1.0')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
            ],
            options={
                'ordering': ['agency', 'object_id', '-version'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('local_representation_version', versionfield.VersionField(blank=True, null=True)),
                ('position', models.IntegerField(verbose_name='position')),
                ('tipe', models.IntegerField(choices=[(0, 'Dimension'), (1, 'Time dimension'), (2, 'Measure dimension')], default=0, verbose_name='type')),
            ],
            options={
                'verbose_name': 'Dimension',
                'verbose_name_plural': 'Dimensions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DimensionList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
            ],
            options={
                'ordering': ['data_structure', 'object_id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasureList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_structure', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='datastructure.DataStructure', verbose_name='Data structure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrimaryMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('concept_identity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='conceptscheme.Concept', verbose_name='Concept identity')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.MeasureList', verbose_name='Measure list')),
                ('local_representation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.Representation', verbose_name='Local representation')),
            ],
            options={
                'verbose_name': 'Primary measure',
                'verbose_name_plural': 'Primary measures',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupDimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.Group', verbose_name='Group')),
                ('dimension', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.Dimension', verbose_name='Dimension')),
            ],
            options={
                'verbose_name': 'Group dimension',
                'verbose_name_plural': 'Group dimensions',
                'abstract': False,
            },
        ),
    ]
