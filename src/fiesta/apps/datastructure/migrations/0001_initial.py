# Generated by Django 2.2.6 on 2019-10-16 05:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('conceptscheme', '0001_initial'),
        ('base', '0001_initial'),
        ('common', '0001_initial'),
        ('registry', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('assignment_status', models.IntegerField(choices=[(0, 'Mandatory'), (1, 'Conditional')], verbose_name='Assignment status')),
                ('annotations', models.ManyToManyField(related_name='_attribute_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('concept_identity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attribute_concept_identity_set', related_query_name='attribute_concept_identity', to='conceptscheme.ConceptReference', verbose_name='Concept identity')),
                ('concept_role', models.ManyToManyField(related_name='attribute_concept_role_set', related_query_name='attribute_concept_role', to='conceptscheme.ConceptReference', verbose_name='Concept roles')),
            ],
            options={
                'verbose_name': 'Attribute',
                'verbose_name_plural': 'Attributes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('major', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Agency', verbose_name='Agency')),
                ('annotations', models.ManyToManyField(related_name='_datastructure_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('content_constraint', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='registry.ContentConstraintReference', verbose_name='Content constraint reference')),
                ('submitted_structure', models.ManyToManyField(to='registry.SubmittedStructure', verbose_name='Submitted structures')),
            ],
            options={
                'ordering': ['agency', 'object_id', '-major', '-minor', '-patch'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('position', models.IntegerField(verbose_name='position')),
                ('tipe', models.IntegerField(choices=[(0, 'Dimension'), (1, 'TimeDimension'), (2, 'MeasureDimension')], default=0, verbose_name='type')),
                ('annotations', models.ManyToManyField(related_name='_dimension_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('concept_identity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dimension_concept_identity_set', related_query_name='dimension_concept_identity', to='conceptscheme.ConceptReference', verbose_name='Concept identity')),
                ('concept_role', models.ManyToManyField(related_name='dimension_concept_role_set', related_query_name='dimension_concept_role', to='conceptscheme.ConceptReference', verbose_name='Concept roles')),
            ],
            options={
                'verbose_name': 'Dimension',
                'verbose_name_plural': 'Dimensions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('annotations', models.ManyToManyField(related_name='_group_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('attachment_constraint', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='registry.AttachmentConstraintReference', verbose_name='Attachment constraint reference')),
                ('data_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.DataStructure', verbose_name='Data structure')),
            ],
            options={
                'ordering': ['data_structure', 'object_id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasureList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotations', models.ManyToManyField(related_name='_measurelist_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('data_structure', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='datastructure.DataStructure', verbose_name='Data structure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrimaryMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('annotations', models.ManyToManyField(related_name='_primarymeasure_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('concept_identity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='conceptscheme.ConceptReference', verbose_name='Concept identity')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.MeasureList', verbose_name='Measure list')),
                ('local_representation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.Representation', verbose_name='Local representation')),
            ],
            options={
                'verbose_name': 'Primary measure',
                'verbose_name_plural': 'Primary measures',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupDimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotations', models.ManyToManyField(related_name='_groupdimension_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.Group', verbose_name='Group')),
                ('dimension_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.Dimension', verbose_name='Dimension')),
            ],
            options={
                'verbose_name': 'Group dimension',
                'verbose_name_plural': 'Group dimensions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DimensionList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotations', models.ManyToManyField(related_name='_dimensionlist_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('data_structure', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='datastructure.DataStructure', verbose_name='Data structure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dimension',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.DimensionList'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='local_representation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.Representation', verbose_name='Local represenation'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='measure_local_representation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='conceptscheme.ConceptSchemeReference', verbose_name='Local representation'),
        ),
        migrations.CreateModel(
            name='DataStructureReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('major_version', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor_version', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch_version', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Agency', verbose_name='Agency')),
            ],
            options={
                'verbose_name': 'Data structure reference',
                'verbose_name_plural': 'Data structure references',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataflowReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('major_version', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor_version', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch_version', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Agency', verbose_name='Agency')),
            ],
            options={
                'verbose_name': 'Dataflow reference',
                'verbose_name_plural': 'Dataflow references',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dataflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('major', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Agency', verbose_name='Agency')),
                ('annotations', models.ManyToManyField(related_name='_dataflow_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('content_constraint', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='registry.ContentConstraintReference', verbose_name='Content constraint reference')),
                ('structure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='datastructure.DataStructureReference', verbose_name='Data structure reference')),
                ('submitted_structure', models.ManyToManyField(to='registry.SubmittedStructure', verbose_name='Submitted structures')),
            ],
            options={
                'verbose_name': 'Dataflow',
                'verbose_name_plural': 'Dataflows',
                'ordering': ['agency', 'object_id', '-major', '-minor', '-patch'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('null', models.BooleanField(default=False, verbose_name='Null')),
                ('primary_measure', models.BooleanField(default=False, verbose_name='Primary measure')),
                ('attachment_group', models.ManyToManyField(related_name='_attributerelationship_attachment_group_+', to='datastructure.Group', verbose_name='Groups')),
                ('attribute', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='datastructure.Attribute', verbose_name='Attribute')),
                ('dimension', models.ManyToManyField(related_name='_attributerelationship_dimension_+', to='datastructure.Dimension', verbose_name='Dimensions')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='datastructure.Group', verbose_name='Group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotations', models.ManyToManyField(related_name='_attributelist_annotations_+', to='common.Annotation', verbose_name='Annotations')),
                ('data_structure', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='datastructure.DataStructure', verbose_name='Data structure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='attribute',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datastructure.AttributeList', verbose_name='Attribute list'),
        ),
        migrations.AddField(
            model_name='attribute',
            name='local_representation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.Representation', verbose_name='Local represenation'),
        ),
        migrations.AddIndex(
            model_name='primarymeasure',
            index=models.Index(fields=['container', 'concept_identity', 'object_id'], name='datastructu_contain_00fa79_idx'),
        ),
        migrations.AddConstraint(
            model_name='primarymeasure',
            constraint=models.UniqueConstraint(fields=('container', 'concept_identity', 'object_id'), name='unique_component'),
        ),
        migrations.AddIndex(
            model_name='groupdimension',
            index=models.Index(fields=['container', 'dimension_reference'], name='datastructu_contain_820bf0_idx'),
        ),
        migrations.AddConstraint(
            model_name='groupdimension',
            constraint=models.UniqueConstraint(fields=('container', 'dimension_reference'), name='unique_group_dimension'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['data_structure', 'object_id'], name='datastructu_data_st_76e5d2_idx'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('data_structure', 'object_id'), name='unique_group'),
        ),
        migrations.AddIndex(
            model_name='dimension',
            index=models.Index(fields=['container', 'concept_identity', 'object_id'], name='datastructu_contain_3dae64_idx'),
        ),
        migrations.AddConstraint(
            model_name='dimension',
            constraint=models.UniqueConstraint(fields=('container', 'concept_identity', 'object_id'), name='unique_component'),
        ),
        migrations.AddIndex(
            model_name='datastructure',
            index=models.Index(fields=['agency', 'object_id', 'major', 'minor', 'patch'], name='datastructu_agency__219e4b_idx'),
        ),
        migrations.AddConstraint(
            model_name='datastructure',
            constraint=models.UniqueConstraint(fields=('agency', 'object_id', 'major', 'minor', 'patch'), name='unique_maintainable'),
        ),
        migrations.AddIndex(
            model_name='dataflow',
            index=models.Index(fields=['agency', 'object_id', 'major', 'minor', 'patch'], name='datastructu_agency__9c413f_idx'),
        ),
        migrations.AddConstraint(
            model_name='dataflow',
            constraint=models.UniqueConstraint(fields=('agency', 'object_id', 'major', 'minor', 'patch'), name='unique_maintainable'),
        ),
        migrations.AddIndex(
            model_name='attribute',
            index=models.Index(fields=['container', 'concept_identity', 'object_id'], name='datastructu_contain_04760c_idx'),
        ),
        migrations.AddConstraint(
            model_name='attribute',
            constraint=models.UniqueConstraint(fields=('container', 'concept_identity', 'object_id'), name='unique_component'),
        ),
    ]
