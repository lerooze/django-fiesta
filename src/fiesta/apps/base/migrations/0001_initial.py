# Generated by Django 2.2.6 on 2019-10-16 05:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*(\\.[A-Za-z][A-Za-z0-9_\\-]*)*'), 'Enter a value of type NestedNCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*(\\.[A-Za-z][A-Za-z0-9_\\-]*)*)"', 'invalid_pattern')], verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Agency',
                'verbose_name_plural': 'Agencies',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, verbose_name='Name')),
                ('name_en', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('name_el', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('department', models.CharField(max_length=63, verbose_name='Department')),
                ('department_en', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('department_el', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('role', models.CharField(max_length=63, verbose_name='Role')),
                ('role_en', models.CharField(max_length=63, null=True, verbose_name='Role')),
                ('role_el', models.CharField(max_length=63, null=True, verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyContactEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyContactFax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fax', models.CharField(db_index=True, max_length=63, verbose_name='Fax')),
            ],
            options={
                'verbose_name': 'Fax',
                'verbose_name_plural': 'Faxes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyContactTelephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(db_index=True, max_length=63, verbose_name='Telephone')),
            ],
            options={
                'verbose_name': 'Telephone',
                'verbose_name_plural': 'Telephones',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyContactURI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, verbose_name='URI')),
            ],
            options={
                'verbose_name': 'URI',
                'verbose_name_plural': 'URIs',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgencyContactX400',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x400', models.CharField(db_index=True, max_length=63, verbose_name='X400')),
            ],
            options={
                'verbose_name': 'X400',
                'verbose_name_plural': 'X400s',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Data consumer',
                'verbose_name_plural': 'Data consumers',
                'ordering': ['container', 'object_id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, verbose_name='Name')),
                ('name_en', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('name_el', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('department', models.CharField(max_length=63, verbose_name='Department')),
                ('department_en', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('department_el', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('role', models.CharField(max_length=63, verbose_name='Role')),
                ('role_en', models.CharField(max_length=63, null=True, verbose_name='Role')),
                ('role_el', models.CharField(max_length=63, null=True, verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerContactEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerContactFax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fax', models.CharField(db_index=True, max_length=63, verbose_name='Fax')),
            ],
            options={
                'verbose_name': 'Fax',
                'verbose_name_plural': 'Faxes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerContactTelephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(db_index=True, max_length=63, verbose_name='Telephone')),
            ],
            options={
                'verbose_name': 'Telephone',
                'verbose_name_plural': 'Telephones',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerContactURI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, verbose_name='URI')),
            ],
            options={
                'verbose_name': 'URI',
                'verbose_name_plural': 'URIs',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerContactX400',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x400', models.CharField(db_index=True, max_length=63, verbose_name='X400')),
            ],
            options={
                'verbose_name': 'X400',
                'verbose_name_plural': 'X400s',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataConsumerScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('major', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
            ],
            options={
                'verbose_name': 'Data consumer scheme',
                'verbose_name_plural': 'Data consumer schemes',
                'ordering': ['agency', 'object_id', '-major', '-minor', '-patch'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Data provider',
                'verbose_name_plural': 'Data providers',
                'ordering': ['container', 'object_id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, verbose_name='Name')),
                ('name_en', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('name_el', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('department', models.CharField(max_length=63, verbose_name='Department')),
                ('department_en', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('department_el', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('role', models.CharField(max_length=63, verbose_name='Role')),
                ('role_en', models.CharField(max_length=63, null=True, verbose_name='Role')),
                ('role_el', models.CharField(max_length=63, null=True, verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderContactEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderContactFax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fax', models.CharField(db_index=True, max_length=63, verbose_name='Fax')),
            ],
            options={
                'verbose_name': 'Fax',
                'verbose_name_plural': 'Faxes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderContactTelephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(db_index=True, max_length=63, verbose_name='Telephone')),
            ],
            options={
                'verbose_name': 'Telephone',
                'verbose_name_plural': 'Telephones',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderContactURI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, verbose_name='URI')),
            ],
            options={
                'verbose_name': 'URI',
                'verbose_name_plural': 'URIs',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderContactX400',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x400', models.CharField(db_index=True, max_length=63, verbose_name='X400')),
            ],
            options={
                'verbose_name': 'X400',
                'verbose_name_plural': 'X400s',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('[A-Za-z][A-Za-z0-9_\\-]*'), 'Enter a value of type NCNameIDType that has pattern "([A-Za-z][A-Za-z0-9_\\-]*)"', 'invalid_pattern')], verbose_name='ID')),
                ('major_version', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor_version', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch_version', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('item_object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProviderScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('major', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
            ],
            options={
                'verbose_name': 'Data provider scheme',
                'verbose_name_plural': 'Data provider schemes',
                'ordering': ['agency', 'object_id', '-major', '-minor', '-patch'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Organisation unit',
                'verbose_name_plural': 'Organisation units',
                'ordering': ['container', 'object_id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, verbose_name='Name')),
                ('name_en', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('name_el', models.CharField(max_length=63, null=True, verbose_name='Name')),
                ('department', models.CharField(max_length=63, verbose_name='Department')),
                ('department_en', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('department_el', models.CharField(max_length=63, null=True, verbose_name='Department')),
                ('role', models.CharField(max_length=63, verbose_name='Role')),
                ('role_en', models.CharField(max_length=63, null=True, verbose_name='Role')),
                ('role_el', models.CharField(max_length=63, null=True, verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitContactEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitContactFax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fax', models.CharField(db_index=True, max_length=63, verbose_name='Fax')),
            ],
            options={
                'verbose_name': 'Fax',
                'verbose_name_plural': 'Faxes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitContactTelephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(db_index=True, max_length=63, verbose_name='Telephone')),
            ],
            options={
                'verbose_name': 'Telephone',
                'verbose_name_plural': 'Telephones',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitContactURI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.URLField(db_index=True, verbose_name='URI')),
            ],
            options={
                'verbose_name': 'URI',
                'verbose_name_plural': 'URIs',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitContactX400',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x400', models.CharField(db_index=True, max_length=63, verbose_name='X400')),
            ],
            options={
                'verbose_name': 'X400',
                'verbose_name_plural': 'X400s',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationUnitScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=127, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('name_el', models.CharField(blank=True, max_length=127, null=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=511, verbose_name='Description')),
                ('description_en', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('description_el', models.CharField(blank=True, max_length=511, null=True, verbose_name='Description')),
                ('major', models.IntegerField(db_index=True, default=1, verbose_name='Major version')),
                ('minor', models.IntegerField(db_index=True, default=0, verbose_name='Minor version')),
                ('patch', models.IntegerField(db_index=True, null=True, verbose_name='Patch version')),
                ('valid_from', models.DateTimeField(blank=True, null=True, verbose_name='Valid from')),
                ('valid_to', models.DateTimeField(blank=True, null=True, verbose_name='Valid to')),
                ('object_id', models.CharField(db_index=True, max_length=31, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False, verbose_name='Is final')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Agency', verbose_name='Agency')),
            ],
            options={
                'verbose_name': 'Organisation unit scheme',
                'verbose_name_plural': 'Organisation unit schemes',
                'ordering': ['agency', 'object_id', '-major', '-minor', '-patch'],
                'abstract': False,
            },
        ),
    ]
