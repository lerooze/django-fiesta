# Generated by Django 2.2.1 on 2019-05-30 15:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('object_id', models.CharField(blank=True, max_length=63, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
            ],
            options={
                'ordering': ['object_id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(default='1.0', max_length=15, validators=[django.core.validators.RegexValidator(re.compile('[0-9]+(\\.[0-9]+)*'), 'Enter a value of type VersionType that has pattern "([0-9]+(\\.[0-9]+)*)"', 'invalid_pattern')])),
                ('valid_from', models.DateTimeField(blank=True, null=True)),
                ('valid_to', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(re.compile('^[A-Za-z0-9_@$\\-]+$'), 'Enter a value of type IDType that has pattern "(^[A-Za-z0-9_@$\\-]+$)"', 'invalid_pattern')], verbose_name='ID')),
                ('is_final', models.BooleanField(default=False)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Organisation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='organisation',
            name='wrappers',
            field=models.ManyToManyField(blank=True, related_name='organisations', to='base.OrganisationScheme'),
        ),
        migrations.CreateModel(
            name='Fax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=63, verbose_name='FAX')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faxes', to='base.Contact')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.EmailField(max_length=254, verbose_name='email address')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='base.Contact')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contact',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organisation_contacts', to='base.Organisation'),
        ),
        migrations.AddField(
            model_name='contact',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='X400',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=63, verbose_name='X400')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='x400s', to='base.Contact')),
            ],
            options={
                'abstract': False,
                'unique_together': {('contact', 'value')},
            },
        ),
        migrations.CreateModel(
            name='URI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.URLField(verbose_name='URI')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uris', to='base.Contact')),
            ],
            options={
                'abstract': False,
                'unique_together': {('contact', 'value')},
            },
        ),
        migrations.CreateModel(
            name='Telephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=63, verbose_name='phone')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telephones', to='base.Contact')),
            ],
            options={
                'abstract': False,
                'unique_together': {('contact', 'value')},
            },
        ),
        migrations.AddIndex(
            model_name='organisation',
            index=models.Index(fields=['object_id'], name='base_organi_object__63a41d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fax',
            unique_together={('contact', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='email',
            unique_together={('contact', 'value')},
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['user'], name='base_contac_user_id_4f44c1_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['organisation'], name='base_contac_organis_94ac6e_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['user', 'organisation'], name='base_contac_user_id_edc90e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contact',
            unique_together={('user', 'organisation')},
        ),
    ]
